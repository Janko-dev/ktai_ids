{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Janko-dev/ktai_ids/blob/main/RF_versieBrian.pynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#KTAI - Project\n",
        "Jan Baljan\n",
        "\n",
        "Brian Baert"
      ],
      "metadata": {
        "id": "Db-7g1rO4aSG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Loading the dataset"
      ],
      "metadata": {
        "id": "pY8umChMy1Wi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount(\"/content/drive/\")\n",
        "#Google colab first has to mount the google drive where the data is located"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DxDWvKRDy611",
        "outputId": "474f5a11-730b-4b43-ae6f-a68a2de0ffdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "train = pd.read_csv('/content/drive/MyDrive/UNSWNB15/UNSW_NB15_training-set.csv') \n",
        "#make an in-memory pandas dataframe of the training dataset\n",
        "test = pd.read_csv('/content/drive/MyDrive/UNSWNB15/UNSW_NB15_testing-set.csv')\n",
        "#make an in-memory pandas dataframe of the test dataset\n",
        "test.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "gPIyRfBu1VwM",
        "outputId": "d4aae934-5be0-4dec-b8ad-d533c935ef5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id       dur proto service state  spkts  dpkts  sbytes  dbytes       rate  \\\n",
              "0   1  0.121478   tcp       -   FIN      6      4     258     172  74.087490   \n",
              "1   2  0.649902   tcp       -   FIN     14     38     734   42014  78.473372   \n",
              "2   3  1.623129   tcp       -   FIN      8     16     364   13186  14.170161   \n",
              "3   4  1.681642   tcp     ftp   FIN     12     12     628     770  13.677108   \n",
              "4   5  0.449454   tcp       -   FIN     10      6     534     268  33.373826   \n",
              "\n",
              "   ...  ct_dst_sport_ltm  ct_dst_src_ltm  is_ftp_login  ct_ftp_cmd  \\\n",
              "0  ...                 1               1             0           0   \n",
              "1  ...                 1               2             0           0   \n",
              "2  ...                 1               3             0           0   \n",
              "3  ...                 1               3             1           1   \n",
              "4  ...                 1              40             0           0   \n",
              "\n",
              "   ct_flw_http_mthd  ct_src_ltm  ct_srv_dst  is_sm_ips_ports  attack_cat  \\\n",
              "0                 0           1           1                0      Normal   \n",
              "1                 0           1           6                0      Normal   \n",
              "2                 0           2           6                0      Normal   \n",
              "3                 0           2           1                0      Normal   \n",
              "4                 0           2          39                0      Normal   \n",
              "\n",
              "   label  \n",
              "0      0  \n",
              "1      0  \n",
              "2      0  \n",
              "3      0  \n",
              "4      0  \n",
              "\n",
              "[5 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9d6bc942-1df9-4f52-b57a-3773a7973162\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>dur</th>\n",
              "      <th>proto</th>\n",
              "      <th>service</th>\n",
              "      <th>state</th>\n",
              "      <th>spkts</th>\n",
              "      <th>dpkts</th>\n",
              "      <th>sbytes</th>\n",
              "      <th>dbytes</th>\n",
              "      <th>rate</th>\n",
              "      <th>...</th>\n",
              "      <th>ct_dst_sport_ltm</th>\n",
              "      <th>ct_dst_src_ltm</th>\n",
              "      <th>is_ftp_login</th>\n",
              "      <th>ct_ftp_cmd</th>\n",
              "      <th>ct_flw_http_mthd</th>\n",
              "      <th>ct_src_ltm</th>\n",
              "      <th>ct_srv_dst</th>\n",
              "      <th>is_sm_ips_ports</th>\n",
              "      <th>attack_cat</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.121478</td>\n",
              "      <td>tcp</td>\n",
              "      <td>-</td>\n",
              "      <td>FIN</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>258</td>\n",
              "      <td>172</td>\n",
              "      <td>74.087490</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.649902</td>\n",
              "      <td>tcp</td>\n",
              "      <td>-</td>\n",
              "      <td>FIN</td>\n",
              "      <td>14</td>\n",
              "      <td>38</td>\n",
              "      <td>734</td>\n",
              "      <td>42014</td>\n",
              "      <td>78.473372</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1.623129</td>\n",
              "      <td>tcp</td>\n",
              "      <td>-</td>\n",
              "      <td>FIN</td>\n",
              "      <td>8</td>\n",
              "      <td>16</td>\n",
              "      <td>364</td>\n",
              "      <td>13186</td>\n",
              "      <td>14.170161</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1.681642</td>\n",
              "      <td>tcp</td>\n",
              "      <td>ftp</td>\n",
              "      <td>FIN</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>628</td>\n",
              "      <td>770</td>\n",
              "      <td>13.677108</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0.449454</td>\n",
              "      <td>tcp</td>\n",
              "      <td>-</td>\n",
              "      <td>FIN</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>534</td>\n",
              "      <td>268</td>\n",
              "      <td>33.373826</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>39</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 45 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d6bc942-1df9-4f52-b57a-3773a7973162')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9d6bc942-1df9-4f52-b57a-3773a7973162 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9d6bc942-1df9-4f52-b57a-3773a7973162');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "gGYiM2YB2kok",
        "outputId": "1526ee85-814a-4c90-824f-9d25779f03ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id       dur proto service state  spkts  dpkts  sbytes  dbytes  \\\n",
              "0   1  0.000011   udp       -   INT      2      0     496       0   \n",
              "1   2  0.000008   udp       -   INT      2      0    1762       0   \n",
              "2   3  0.000005   udp       -   INT      2      0    1068       0   \n",
              "3   4  0.000006   udp       -   INT      2      0     900       0   \n",
              "4   5  0.000010   udp       -   INT      2      0    2126       0   \n",
              "\n",
              "          rate  ...  ct_dst_sport_ltm  ct_dst_src_ltm  is_ftp_login  \\\n",
              "0   90909.0902  ...                 1               2             0   \n",
              "1  125000.0003  ...                 1               2             0   \n",
              "2  200000.0051  ...                 1               3             0   \n",
              "3  166666.6608  ...                 1               3             0   \n",
              "4  100000.0025  ...                 1               3             0   \n",
              "\n",
              "   ct_ftp_cmd  ct_flw_http_mthd  ct_src_ltm  ct_srv_dst  is_sm_ips_ports  \\\n",
              "0           0                 0           1           2                0   \n",
              "1           0                 0           1           2                0   \n",
              "2           0                 0           1           3                0   \n",
              "3           0                 0           2           3                0   \n",
              "4           0                 0           2           3                0   \n",
              "\n",
              "   attack_cat  label  \n",
              "0      Normal      0  \n",
              "1      Normal      0  \n",
              "2      Normal      0  \n",
              "3      Normal      0  \n",
              "4      Normal      0  \n",
              "\n",
              "[5 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-437f51ee-0399-4793-87bd-0d9bc204db0a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>dur</th>\n",
              "      <th>proto</th>\n",
              "      <th>service</th>\n",
              "      <th>state</th>\n",
              "      <th>spkts</th>\n",
              "      <th>dpkts</th>\n",
              "      <th>sbytes</th>\n",
              "      <th>dbytes</th>\n",
              "      <th>rate</th>\n",
              "      <th>...</th>\n",
              "      <th>ct_dst_sport_ltm</th>\n",
              "      <th>ct_dst_src_ltm</th>\n",
              "      <th>is_ftp_login</th>\n",
              "      <th>ct_ftp_cmd</th>\n",
              "      <th>ct_flw_http_mthd</th>\n",
              "      <th>ct_src_ltm</th>\n",
              "      <th>ct_srv_dst</th>\n",
              "      <th>is_sm_ips_ports</th>\n",
              "      <th>attack_cat</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.000011</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>496</td>\n",
              "      <td>0</td>\n",
              "      <td>90909.0902</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.000008</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1762</td>\n",
              "      <td>0</td>\n",
              "      <td>125000.0003</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.000005</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1068</td>\n",
              "      <td>0</td>\n",
              "      <td>200000.0051</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0.000006</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>900</td>\n",
              "      <td>0</td>\n",
              "      <td>166666.6608</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0.000010</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2126</td>\n",
              "      <td>0</td>\n",
              "      <td>100000.0025</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 45 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-437f51ee-0399-4793-87bd-0d9bc204db0a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-437f51ee-0399-4793-87bd-0d9bc204db0a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-437f51ee-0399-4793-87bd-0d9bc204db0a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Preprocessing the dataset"
      ],
      "metadata": {
        "id": "a5sFNgejy7f6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# The same preprocessing needs to be done on both the training and test dataset\n",
        "# We can base our work on https://www.kaggle.com/code/imranjamal/network-intrusion-detection-system-using-ml-2/notebook"
      ],
      "metadata": {
        "id": "8CkzOTKly01L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# first step is merging both datasets, so we do not need to do the same preprocessing twice\n",
        "data = pd.concat([train, test]).reset_index(drop=True) # the index needs to be resetted in order for the numbering to be correct\n",
        "cols_cat = data.select_dtypes('object').columns # save the categorical (non-numeric) columns\n",
        "cols_numeric = data._get_numeric_data().columns # save the numberical columns"
      ],
      "metadata": {
        "id": "emxEPM2DXIeK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 456
        },
        "id": "dsDcg_BlXsKu",
        "outputId": "5a4d1f5e-4e98-47db-ab64-efb14ddc634d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id       dur proto service state  spkts  dpkts  sbytes  dbytes  \\\n",
              "0   1  0.000011   udp       -   INT      2      0     496       0   \n",
              "1   2  0.000008   udp       -   INT      2      0    1762       0   \n",
              "2   3  0.000005   udp       -   INT      2      0    1068       0   \n",
              "3   4  0.000006   udp       -   INT      2      0     900       0   \n",
              "4   5  0.000010   udp       -   INT      2      0    2126       0   \n",
              "5   6  0.000003   udp       -   INT      2      0     784       0   \n",
              "6   7  0.000006   udp       -   INT      2      0    1960       0   \n",
              "7   8  0.000028   udp       -   INT      2      0    1384       0   \n",
              "8   9  0.000000   arp       -   INT      1      0      46       0   \n",
              "9  10  0.000000   arp       -   INT      1      0      46       0   \n",
              "\n",
              "           rate  ...  ct_dst_sport_ltm  ct_dst_src_ltm  is_ftp_login  \\\n",
              "0   90909.09020  ...                 1               2             0   \n",
              "1  125000.00030  ...                 1               2             0   \n",
              "2  200000.00510  ...                 1               3             0   \n",
              "3  166666.66080  ...                 1               3             0   \n",
              "4  100000.00250  ...                 1               3             0   \n",
              "5  333333.32150  ...                 1               2             0   \n",
              "6  166666.66080  ...                 1               2             0   \n",
              "7   35714.28522  ...                 1               3             0   \n",
              "8       0.00000  ...                 2               2             0   \n",
              "9       0.00000  ...                 2               2             0   \n",
              "\n",
              "   ct_ftp_cmd  ct_flw_http_mthd  ct_src_ltm  ct_srv_dst  is_sm_ips_ports  \\\n",
              "0           0                 0           1           2                0   \n",
              "1           0                 0           1           2                0   \n",
              "2           0                 0           1           3                0   \n",
              "3           0                 0           2           3                0   \n",
              "4           0                 0           2           3                0   \n",
              "5           0                 0           2           2                0   \n",
              "6           0                 0           2           2                0   \n",
              "7           0                 0           1           3                0   \n",
              "8           0                 0           2           2                1   \n",
              "9           0                 0           2           2                1   \n",
              "\n",
              "   attack_cat  label  \n",
              "0      Normal      0  \n",
              "1      Normal      0  \n",
              "2      Normal      0  \n",
              "3      Normal      0  \n",
              "4      Normal      0  \n",
              "5      Normal      0  \n",
              "6      Normal      0  \n",
              "7      Normal      0  \n",
              "8      Normal      0  \n",
              "9      Normal      0  \n",
              "\n",
              "[10 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a7f0d4a7-1001-4f9c-907e-b6f20212594e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>dur</th>\n",
              "      <th>proto</th>\n",
              "      <th>service</th>\n",
              "      <th>state</th>\n",
              "      <th>spkts</th>\n",
              "      <th>dpkts</th>\n",
              "      <th>sbytes</th>\n",
              "      <th>dbytes</th>\n",
              "      <th>rate</th>\n",
              "      <th>...</th>\n",
              "      <th>ct_dst_sport_ltm</th>\n",
              "      <th>ct_dst_src_ltm</th>\n",
              "      <th>is_ftp_login</th>\n",
              "      <th>ct_ftp_cmd</th>\n",
              "      <th>ct_flw_http_mthd</th>\n",
              "      <th>ct_src_ltm</th>\n",
              "      <th>ct_srv_dst</th>\n",
              "      <th>is_sm_ips_ports</th>\n",
              "      <th>attack_cat</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.000011</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>496</td>\n",
              "      <td>0</td>\n",
              "      <td>90909.09020</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.000008</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1762</td>\n",
              "      <td>0</td>\n",
              "      <td>125000.00030</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.000005</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1068</td>\n",
              "      <td>0</td>\n",
              "      <td>200000.00510</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0.000006</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>900</td>\n",
              "      <td>0</td>\n",
              "      <td>166666.66080</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0.000010</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2126</td>\n",
              "      <td>0</td>\n",
              "      <td>100000.00250</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>0.000003</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>784</td>\n",
              "      <td>0</td>\n",
              "      <td>333333.32150</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>0.000006</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1960</td>\n",
              "      <td>0</td>\n",
              "      <td>166666.66080</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>0.000028</td>\n",
              "      <td>udp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1384</td>\n",
              "      <td>0</td>\n",
              "      <td>35714.28522</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>arp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>46</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>arp</td>\n",
              "      <td>-</td>\n",
              "      <td>INT</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>46</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>Normal</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 45 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7f0d4a7-1001-4f9c-907e-b6f20212594e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a7f0d4a7-1001-4f9c-907e-b6f20212594e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a7f0d4a7-1001-4f9c-907e-b6f20212594e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Exploratory data analysis"
      ],
      "metadata": {
        "id": "u0ZaxSkQy5RK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# descriptive statistics\n",
        "data.describe()"
      ],
      "metadata": {
        "id": "1oXwoh_ly94n",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "outputId": "d0c0fa24-7cd0-4545-e576-74e5c10a79ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  id            dur          spkts          dpkts  \\\n",
              "count  257673.000000  257673.000000  257673.000000  257673.000000   \n",
              "mean    72811.823858       1.246715      19.777144      18.514703   \n",
              "std     48929.917641       5.974305     135.947152     111.985965   \n",
              "min         1.000000       0.000000       1.000000       0.000000   \n",
              "25%     32210.000000       0.000008       2.000000       0.000000   \n",
              "50%     64419.000000       0.004285       4.000000       2.000000   \n",
              "75%    110923.000000       0.685777      12.000000      10.000000   \n",
              "max    175341.000000      59.999989   10646.000000   11018.000000   \n",
              "\n",
              "             sbytes        dbytes          rate           sttl           dttl  \\\n",
              "count  2.576730e+05  2.576730e+05  2.576730e+05  257673.000000  257673.000000   \n",
              "mean   8.572952e+03  1.438729e+04  9.125391e+04     180.000931      84.754957   \n",
              "std    1.737739e+05  1.461993e+05  1.603446e+05     102.488268     112.762131   \n",
              "min    2.400000e+01  0.000000e+00  0.000000e+00       0.000000       0.000000   \n",
              "25%    1.140000e+02  0.000000e+00  3.078928e+01      62.000000       0.000000   \n",
              "50%    5.280000e+02  1.780000e+02  2.955665e+03     254.000000      29.000000   \n",
              "75%    1.362000e+03  1.064000e+03  1.250000e+05     254.000000     252.000000   \n",
              "max    1.435577e+07  1.465753e+07  1.000000e+06     255.000000     254.000000   \n",
              "\n",
              "              sload  ...  ct_src_dport_ltm  ct_dst_sport_ltm  ct_dst_src_ltm  \\\n",
              "count  2.576730e+05  ...     257673.000000     257673.000000   257673.000000   \n",
              "mean   7.060869e+07  ...          5.238271          4.032677        8.322964   \n",
              "std    1.857313e+08  ...          8.160822          5.831515       11.120754   \n",
              "min    0.000000e+00  ...          1.000000          1.000000        1.000000   \n",
              "25%    1.231800e+04  ...          1.000000          1.000000        1.000000   \n",
              "50%    7.439423e+05  ...          1.000000          1.000000        3.000000   \n",
              "75%    8.000000e+07  ...          4.000000          3.000000        8.000000   \n",
              "max    5.988000e+09  ...         59.000000         46.000000       65.000000   \n",
              "\n",
              "        is_ftp_login     ct_ftp_cmd  ct_flw_http_mthd     ct_src_ltm  \\\n",
              "count  257673.000000  257673.000000     257673.000000  257673.000000   \n",
              "mean        0.012819       0.012850          0.132005       6.800045   \n",
              "std         0.116091       0.116421          0.681854       8.396266   \n",
              "min         0.000000       0.000000          0.000000       1.000000   \n",
              "25%         0.000000       0.000000          0.000000       2.000000   \n",
              "50%         0.000000       0.000000          0.000000       3.000000   \n",
              "75%         0.000000       0.000000          0.000000       8.000000   \n",
              "max         4.000000       4.000000         30.000000      60.000000   \n",
              "\n",
              "          ct_srv_dst  is_sm_ips_ports          label  \n",
              "count  257673.000000    257673.000000  257673.000000  \n",
              "mean        9.121049         0.014274       0.639077  \n",
              "std        10.874752         0.118618       0.480269  \n",
              "min         1.000000         0.000000       0.000000  \n",
              "25%         2.000000         0.000000       0.000000  \n",
              "50%         4.000000         0.000000       1.000000  \n",
              "75%        11.000000         0.000000       1.000000  \n",
              "max        62.000000         1.000000       1.000000  \n",
              "\n",
              "[8 rows x 41 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4606050f-b3fe-44ed-a74f-6c7b12e24e47\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>dur</th>\n",
              "      <th>spkts</th>\n",
              "      <th>dpkts</th>\n",
              "      <th>sbytes</th>\n",
              "      <th>dbytes</th>\n",
              "      <th>rate</th>\n",
              "      <th>sttl</th>\n",
              "      <th>dttl</th>\n",
              "      <th>sload</th>\n",
              "      <th>...</th>\n",
              "      <th>ct_src_dport_ltm</th>\n",
              "      <th>ct_dst_sport_ltm</th>\n",
              "      <th>ct_dst_src_ltm</th>\n",
              "      <th>is_ftp_login</th>\n",
              "      <th>ct_ftp_cmd</th>\n",
              "      <th>ct_flw_http_mthd</th>\n",
              "      <th>ct_src_ltm</th>\n",
              "      <th>ct_srv_dst</th>\n",
              "      <th>is_sm_ips_ports</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>2.576730e+05</td>\n",
              "      <td>2.576730e+05</td>\n",
              "      <td>2.576730e+05</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>2.576730e+05</td>\n",
              "      <td>...</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "      <td>257673.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>72811.823858</td>\n",
              "      <td>1.246715</td>\n",
              "      <td>19.777144</td>\n",
              "      <td>18.514703</td>\n",
              "      <td>8.572952e+03</td>\n",
              "      <td>1.438729e+04</td>\n",
              "      <td>9.125391e+04</td>\n",
              "      <td>180.000931</td>\n",
              "      <td>84.754957</td>\n",
              "      <td>7.060869e+07</td>\n",
              "      <td>...</td>\n",
              "      <td>5.238271</td>\n",
              "      <td>4.032677</td>\n",
              "      <td>8.322964</td>\n",
              "      <td>0.012819</td>\n",
              "      <td>0.012850</td>\n",
              "      <td>0.132005</td>\n",
              "      <td>6.800045</td>\n",
              "      <td>9.121049</td>\n",
              "      <td>0.014274</td>\n",
              "      <td>0.639077</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>48929.917641</td>\n",
              "      <td>5.974305</td>\n",
              "      <td>135.947152</td>\n",
              "      <td>111.985965</td>\n",
              "      <td>1.737739e+05</td>\n",
              "      <td>1.461993e+05</td>\n",
              "      <td>1.603446e+05</td>\n",
              "      <td>102.488268</td>\n",
              "      <td>112.762131</td>\n",
              "      <td>1.857313e+08</td>\n",
              "      <td>...</td>\n",
              "      <td>8.160822</td>\n",
              "      <td>5.831515</td>\n",
              "      <td>11.120754</td>\n",
              "      <td>0.116091</td>\n",
              "      <td>0.116421</td>\n",
              "      <td>0.681854</td>\n",
              "      <td>8.396266</td>\n",
              "      <td>10.874752</td>\n",
              "      <td>0.118618</td>\n",
              "      <td>0.480269</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.400000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>32210.000000</td>\n",
              "      <td>0.000008</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.140000e+02</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>3.078928e+01</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.231800e+04</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>64419.000000</td>\n",
              "      <td>0.004285</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>5.280000e+02</td>\n",
              "      <td>1.780000e+02</td>\n",
              "      <td>2.955665e+03</td>\n",
              "      <td>254.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>7.439423e+05</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>110923.000000</td>\n",
              "      <td>0.685777</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1.362000e+03</td>\n",
              "      <td>1.064000e+03</td>\n",
              "      <td>1.250000e+05</td>\n",
              "      <td>254.000000</td>\n",
              "      <td>252.000000</td>\n",
              "      <td>8.000000e+07</td>\n",
              "      <td>...</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>175341.000000</td>\n",
              "      <td>59.999989</td>\n",
              "      <td>10646.000000</td>\n",
              "      <td>11018.000000</td>\n",
              "      <td>1.435577e+07</td>\n",
              "      <td>1.465753e+07</td>\n",
              "      <td>1.000000e+06</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>254.000000</td>\n",
              "      <td>5.988000e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>59.000000</td>\n",
              "      <td>46.000000</td>\n",
              "      <td>65.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 41 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4606050f-b3fe-44ed-a74f-6c7b12e24e47')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4606050f-b3fe-44ed-a74f-6c7b12e24e47 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4606050f-b3fe-44ed-a74f-6c7b12e24e47');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iSJtRJCvG_2u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "IS9NjDF7EYJx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# The first step would be checking for missing values, but there are no missing values here, so we can omit this step\n",
        "# However, there are some numerical features where the values have very high values, it is wise to use standardisation on these\n",
        "# in Python we can use the StandardScaler object. \n",
        "# columns worth standardizing are all numerical columns"
      ],
      "metadata": {
        "id": "bQITLn_fXztr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# what attack categories are there in the data? \n",
        "attack_types = data.attack_cat.unique()\n",
        "print(attack_types.tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HG84e8IJYGd3",
        "outputId": "d6ca80c0-a540-4b7a-b9ac-33ea4994a5f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Normal', 'Reconnaissance', 'Backdoor', 'DoS', 'Exploits', 'Analysis', 'Fuzzers', 'Worms', 'Shellcode', 'Generic']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's investigate the amount of attack types in the dataset:\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "fig, ax = plt.subplots(figsize=(8,4))\n",
        "ax = sns.countplot(x='attack_cat', hue='label', data=data)\n",
        "ax.legend(loc=\"upper right\", labels=('normal', 'attack'))\n",
        "ax.set_title(\"Attack type distribution\")\n",
        "plt.xticks(rotation=30)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "anh4dxGIMP7a",
        "outputId": "0c8c07fc-42bf-4d71-936c-893850a884d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# what service types are there in the data?\n",
        "service_types = data.service.unique()\n",
        "print(service_types.tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VD0ElKM0Yvtk",
        "outputId": "59fbf5b1-faa2-47f3-800c-7f5cf00e5a60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['-', 'http', 'ftp', 'ftp-data', 'smtp', 'pop3', 'dns', 'snmp', 'ssl', 'dhcp', 'irc', 'radius', 'ssh']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's investigate the service type:\n",
        "fig, ax = plt.subplots(figsize=(8,4))\n",
        "ax = sns.countplot(x='service', hue='label', data=data)\n",
        "ax.legend(loc=\"upper right\", labels=('normal', 'attack'))\n",
        "ax.set_title(\"Service type distribution\")\n",
        "plt.xticks(rotation=30)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "uXecc0GPNQVp",
        "outputId": "2f7ca78a-deb1-4a92-f037-01cfcf073d2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# in the above it is clear that the 'empty' service type is filled with a '-', it is better and more convenient to use 'None'\n",
        "data.service = np.where(data.service == '-', 'None', data.service)\n",
        "service_types = data.service.unique()\n",
        "print(service_types.tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xee8aamzY8xL",
        "outputId": "e5edeb20-0d12-4d78-8d06-6f0fb32f37ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['None', 'http', 'ftp', 'ftp-data', 'smtp', 'pop3', 'dns', 'snmp', 'ssl', 'dhcp', 'irc', 'radius', 'ssh']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# remove the categorical columns (without any one-hot encoding or whatever)\n",
        "data_cleaned = data.drop(cols_cat, axis=1)"
      ],
      "metadata": {
        "id": "2g3OsjrEbkcv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## ML Models"
      ],
      "metadata": {
        "id": "AwZoZHUR4CVn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# what models will we create? \n",
        "# will we do a grid search to find the best hyperparameter combination? "
      ],
      "metadata": {
        "id": "fTrr38mJ4B7E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# first step --> create a train and test subset, then divide the train subset in a train and validation set \n",
        "from sklearn.model_selection import train_test_split\n",
        "# (validation set is used to train the hyperparameters of the model)\n",
        "X_train, X_test, y_train, y_test = train_test_split(data_cleaned.drop('label', axis=1), data_cleaned['label'], test_size=0.20, random_state=37)\n",
        "# inliterature they propose to do a validation split as well, but for now, this is not used here\n",
        "#X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=47)"
      ],
      "metadata": {
        "id": "HVdh0cOOfmtA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# standardisation of the numerical columns needs to happen AFTER the splitting in a train and test dataset\n",
        "# according to online sources https://medium.com/analytics-vidhya/why-it-makes-a-difference-how-to-standardize-training-and-test-set-e95bf350bed3\n",
        "# it is recommended to use the standard scaler from the training data to standardize the test dataset\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "train_scaler = StandardScaler()\n",
        "\n",
        "scaled_X_train = train_scaler.fit_transform(X_train)\n",
        "scaled_X_test = train_scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "JlbDTEMCRr0F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# starting of with a very simple RandomForest classifier, no cross_validation or anything on all numerical columns\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "clf = RandomForestClassifier(n_estimators=10, criterion=\"entropy\", max_depth=4, random_state=41)\n",
        "# n_estimators = the amount of classification trees used in the forest\n",
        "# criterion = splitting criterion used (standard = Gini, but I prefer entropy)\n",
        "# max_depth = the maximum depth of the trees\n",
        "# random_state = randomizer\n",
        "\n",
        "clf.fit(scaled_X_train, y_train)"
      ],
      "metadata": {
        "id": "gM1dWKSh36vx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 92
        },
        "outputId": "4583bd90-14e7-4135-f8e6-bd621914f898"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(criterion='entropy', max_depth=4, n_estimators=10,\n",
              "                       random_state=41)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=4, n_estimators=10,\n",
              "                       random_state=41)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=4, n_estimators=10,\n",
              "                       random_state=41)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf.score(scaled_X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zKerc2aZbf5s",
        "outputId": "16a3c0c9-eb86-462a-81ed-a4f6f5bf7e4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.904772531022907"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# make predictions on the test set, save the ground truth as y_true\n",
        "y_pred = clf.predict(scaled_X_test)\n",
        "y_true = y_test"
      ],
      "metadata": {
        "id": "M8JhiQxkhfRB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "cf_matrix = confusion_matrix(y_true, y_pred)\n",
        "print(\"\\nTest confusion matrix\")\n",
        "sns.heatmap(cf_matrix, annot=True, cmap='Blues', fmt='g') # fmt='g' to disable scientific notation\n",
        "plt.xlabel('Predicted', fontsize=12)\n",
        "plt.ylabel('True', fontsize=12)"
      ],
      "metadata": {
        "id": "duZTxki-gzOV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "outputId": "c8599e58-6816-4989-9730-1e3acc616530"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Test confusion matrix\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(33.0, 0.5, 'True')"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(cf_matrix)"
      ],
      "metadata": {
        "id": "nHJmUfUE-nef",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d55fa631-a6eb-4759-e515-f7865b6c98d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[13955  4581]\n",
            " [  313 32686]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from time import time\n",
        "# Random search\n",
        "#--------------\n",
        "# record the starting time\n",
        "\n",
        "start = time()\n",
        "\n",
        "# creating a grid of parameters\n",
        "param_grid = {\n",
        "  'n_estimators': [5, 10, 15, 20],\n",
        "  'min_samples_leaf': [5, 10, 15],\n",
        "  'max_depth': [6, 8, 10, 12, 14],\n",
        "  'criterion': ['gini', 'entropy']\n",
        "}"
      ],
      "metadata": {
        "id": "Kdn33eWrhp73"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# instantiate the grid search cross validation\n",
        "rf_gs = GridSearchCV(\n",
        "  estimator=clf,\n",
        "  param_grid=param_grid,\n",
        "  scoring='accuracy',\n",
        "  cv=5,\n",
        "  refit=True,\n",
        "  return_train_score=True, \n",
        "  verbose=5\n",
        ")"
      ],
      "metadata": {
        "id": "G7OHoELPmpTf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Record the current time \n",
        "start = time()\n",
        "# Fit the selected model\n",
        "rf_gs.fit(scaled_X_train, y_train)\n",
        "# Print the time spend and number of models ran\n",
        "print(\"GridSearchCV took %.2f seconds for %d candidate parameter settings.\" % ((time() - start), len(rf_gs.cv_results_['params'])))"
      ],
      "metadata": {
        "id": "vMeh9E-Kolu-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "y_pred_grid = rf_gs.predict(scaled_X_test)\n",
        "accuracy_grid = accuracy_score(y_test, y_pred_grid)\n",
        "print(accuracy_grid)"
      ],
      "metadata": {
        "id": "t9L1qvD8q75L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_grid_bestModel = rf_gs.best_estimator_.predict(scaled_X_test)\n",
        "print(\"The model with parameters: \", rf_gs.best_estimator_, \" \\ngives the following accuracy: \", accuracy_score(y_test, y_pred_grid_bestModel))"
      ],
      "metadata": {
        "id": "K2GuBrzlrdOO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "# making a dumpfile where the model parameters are being saved\n",
        "# this is usually done with pickle, hence the .pkl extension\n",
        "pickle.dump(rf_gs.best_estimator_, open('/content/drive/MyDrive/UNSWNB15/RF_model_std.pkl', 'wb'))"
      ],
      "metadata": {
        "id": "ycJlDNLctwS7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# see: https://towardsdatascience.com/hyperparameter-tuning-with-grid-search-and-random-search-6e1b5e175144#:~:text=The%20key%20difference%20from%20grid,sample%2050%20values%20to%20test."
      ],
      "metadata": {
        "id": "F4KMrQYDoqyl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# an attempt to plot A tree from the forest, this works but not that informative (too many branches)\n",
        "\n",
        "cols_numeric_without_label = cols_numeric.drop('label')\n",
        "label_values = data.label.unique()\n",
        "\n",
        "from sklearn import tree\n",
        "import graphviz\n",
        "dot_data = tree.export_graphviz(rf_gs.best_estimator_[1], out_file=None, feature_names = cols_numeric_without_label, class_names=label_values.astype(str), filled=True)"
      ],
      "metadata": {
        "id": "Xhf8m5bFwe48"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "write_to_file = lambda file_name: open(file_name, \"wb\").write(graphviz.Source(dot_data, format='svg').pipe())\n",
        "\n",
        "# write_to_file(\"rf_model_graph.svg\")\n",
        "\n",
        "# graph = graphviz.Source(dot_data, format=\"png\")\n",
        "# graph"
      ],
      "metadata": {
        "id": "hPAEdyg_wqvP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# loading in the saved model\n",
        "import pickle\n",
        "loaded_model = pickle.load(open('/content/drive/MyDrive/UNSWNB15/RF_model_std_8032023.pkl', 'rb')) #the original model = RF_model.pkl\n",
        "result = loaded_model.score(scaled_X_test, y_test)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rJ_myVB5-Oa_",
        "outputId": "1d92a742-2d1b-4e23-ad93-bb30d41528ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9680605413796449\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "RF_class_report = classification_report(y_test, loaded_model.predict(scaled_X_test), target_names=['0', '1'])\n",
        "print(RF_class_report)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uuu5uAC2-4r3",
        "outputId": "ac7128fa-6946-42c6-8dc8-538499485d28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.95      0.96     18536\n",
            "           1       0.97      0.98      0.98     32999\n",
            "\n",
            "    accuracy                           0.97     51535\n",
            "   macro avg       0.97      0.96      0.97     51535\n",
            "weighted avg       0.97      0.97      0.97     51535\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "fpr, tpr, tresholds = metrics.roc_curve(y_test, loaded_model.predict(scaled_X_test), pos_label=1)\n",
        "print(\"FPR = \", fpr)\n",
        "print(\"TPR = \", tpr)\n",
        "roc_auc = metrics.auc(fpr, tpr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d5Vj4qicAHuK",
        "outputId": "abfb669c-12e6-47bd-95f6-c83d20ed0422"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "FPR =  [0.         0.04693569 1.        ]\n",
            "TPR =  [0.         0.97648414 1.        ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plotting the ROC curve (Receiver Operating Characteristic)\n",
        "from sklearn.metrics import RocCurveDisplay\n",
        "RF_disp = RocCurveDisplay(fpr=fpr, tpr=tpr, roc_auc=roc_auc, estimator_name='Random Forest')\n",
        "RF_disp.plot()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "gvMF81veAdFn",
        "outputId": "8a3dcbde-60c7-45a7-d19d-f3b2192242d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = loaded_model.predict(scaled_X_test)\n",
        "y_true = y_test\n",
        "cf_matrix = confusion_matrix(y_true, y_pred)\n",
        "print(\"\\nTest confusion matrix\")\n",
        "sns.heatmap(cf_matrix, annot=True, cmap='Blues', fmt='g')\n",
        "plt.xlabel('Predicted', fontsize=12)\n",
        "plt.ylabel('True', fontsize=12)"
      ],
      "metadata": {
        "id": "elnbOlSdBQN1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "outputId": "44b6f6ca-e235-4a32-bb39-aa59d306c116"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Test confusion matrix\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(33.0, 0.5, 'True')"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(cf_matrix) \n",
        "#    TP   FP\n",
        "#    FN   TN\n",
        "#"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sn9Zn6-bBFlR",
        "outputId": "fe48441b-b34d-474f-8eaf-91571f83ad07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[17666   870]\n",
            " [  776 32223]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# attempt to a multiclass prediction --> attack_type\n",
        "import pandas as pd\n",
        "data['attack_cat_nr'] = pd.Categorical(data.attack_cat).codes\n",
        "attack_cat_nr = data.attack_cat_nr.unique()\n",
        "attack_cat_nr #numerical counterpart of the attack_cat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xAdszOQzBIcW",
        "outputId": "58a02d93-efcf-4ab4-ceed-264ea3b8dd23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([6, 7, 1, 2, 3, 0, 4, 9, 8, 5], dtype=int8)"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_cleaned2 = data.drop(cols_cat, axis=1)\n",
        "data_cleaned2.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PZ4TpCOFlCjb",
        "outputId": "d2e1690d-d100-4463-b4f6-356d6f7ac6d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                     int64\n",
              "dur                  float64\n",
              "spkts                  int64\n",
              "dpkts                  int64\n",
              "sbytes                 int64\n",
              "dbytes                 int64\n",
              "rate                 float64\n",
              "sttl                   int64\n",
              "dttl                   int64\n",
              "sload                float64\n",
              "dload                float64\n",
              "sloss                  int64\n",
              "dloss                  int64\n",
              "sinpkt               float64\n",
              "dinpkt               float64\n",
              "sjit                 float64\n",
              "djit                 float64\n",
              "swin                   int64\n",
              "stcpb                  int64\n",
              "dtcpb                  int64\n",
              "dwin                   int64\n",
              "tcprtt               float64\n",
              "synack               float64\n",
              "ackdat               float64\n",
              "smean                  int64\n",
              "dmean                  int64\n",
              "trans_depth            int64\n",
              "response_body_len      int64\n",
              "ct_srv_src             int64\n",
              "ct_state_ttl           int64\n",
              "ct_dst_ltm             int64\n",
              "ct_src_dport_ltm       int64\n",
              "ct_dst_sport_ltm       int64\n",
              "ct_dst_src_ltm         int64\n",
              "is_ftp_login           int64\n",
              "ct_ftp_cmd             int64\n",
              "ct_flw_http_mthd       int64\n",
              "ct_src_ltm             int64\n",
              "ct_srv_dst             int64\n",
              "is_sm_ips_ports        int64\n",
              "label                  int64\n",
              "attack_cat_nr           int8\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_cleaned2 = data_cleaned2.drop('label', axis=1)"
      ],
      "metadata": {
        "id": "XDkH032ulZ_7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(data_cleaned2.drop('attack_cat_nr', axis=1), data_cleaned2['attack_cat_nr'], test_size=0.20, random_state=37)"
      ],
      "metadata": {
        "id": "eLFKH1ValfNr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_scaler2 = StandardScaler()\n",
        "\n",
        "scaled2_X_train = train_scaler2.fit_transform(X_train)\n",
        "scaled2_X_test = train_scaler2.transform(X_test)"
      ],
      "metadata": {
        "id": "GHif74SZmCHr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf_multi = RandomForestClassifier(n_estimators=10, criterion=\"entropy\", max_depth=4, random_state=41)\n",
        "# n_estimators = the amount of classification trees used in the forest\n",
        "# criterion = splitting criterion used (standard = Gini, but I prefer entropy)\n",
        "# max_depth = the maximum depth of the trees\n",
        "# random_state = randomizer\n",
        "\n",
        "clf_multi.fit(scaled2_X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 92
        },
        "id": "iwE6e5ZTmSNM",
        "outputId": "2837bbd6-7dc5-4eee-8ae7-68a912f3c3c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(criterion='entropy', max_depth=4, n_estimators=10,\n",
              "                       random_state=41)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=4, n_estimators=10,\n",
              "                       random_state=41)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=4, n_estimators=10,\n",
              "                       random_state=41)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf_multi.score(scaled2_X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BmddwF9omxBt",
        "outputId": "7010de5b-4fe1-40d6-bfb2-bf9402c03faf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7400285245806207"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = clf_multi.predict(scaled2_X_test)\n",
        "y_true = y_test"
      ],
      "metadata": {
        "id": "apEw1byam-59"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cf_matrix = confusion_matrix(y_true, y_pred)\n",
        "print(\"\\nTest confusion matrix\")\n",
        "sns.heatmap(cf_matrix, annot=True, cmap='Reds', fmt='g')\n",
        "plt.xlabel('Predicted', fontsize=12)\n",
        "plt.ylabel('True', fontsize=12)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "h5lJqjaXnFTF",
        "outputId": "f59f5a82-29c7-4a9e-cbe8-963509f5c09f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Test confusion matrix\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(33.0, 0.5, 'True')"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(attack_types)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ud_TmYSYnJk0",
        "outputId": "e1f5e837-7586-4ad0-e27d-7fad8cf6c828"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Normal' 'Reconnaissance' 'Backdoor' 'DoS' 'Exploits' 'Analysis'\n",
            " 'Fuzzers' 'Worms' 'Shellcode' 'Generic']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(attack_cat_nr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F8jEzhwdoI-0",
        "outputId": "640bc6b6-a2b9-43da-b42e-774807ee0874"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6 7 1 2 3 0 4 9 8 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "attack_types_sorted = ['Analysis', 'Backdoor', 'DoS', 'Exploits', 'Fuzzers', 'Generic', 'Normal', 'Reconnaissance', 'Shellcode', 'Worms']"
      ],
      "metadata": {
        "id": "bGB8jyB33yKf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cf_matrix = confusion_matrix(y_true, y_pred)\n",
        "ax = sns.heatmap(cf_matrix, annot=True, cmap='Reds', fmt='g') # gmt='g' to disable scientific notation\n",
        "ax.set_xlabel('Predicted', fontsize=12)\n",
        "ax.set_ylabel('True', fontsize=12)\n",
        "ax.set_title('Confusion matrix')\n",
        "ax.xaxis.set_ticklabels(attack_types_sorted, rotation=90)\n",
        "ax.yaxis.set_ticklabels(attack_types_sorted, rotation=0)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "rbTJ70POol8a",
        "outputId": "c4bb2cbf-934e-4d82-de08-75ee9400c10d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from time import time\n",
        "# Random search\n",
        "#--------------\n",
        "# record the starting time\n",
        "\n",
        "start = time()\n",
        "\n",
        "# creating a grid of parameters\n",
        "param_grid = {\n",
        "  'bootstrap': [True, False],\n",
        "  'n_estimators': [5, 10, 15, 20],\n",
        "  'min_samples_leaf': [1, 2, 4],\n",
        "  'max_depth': [10, 15, 20],\n",
        "  'criterion': ['entropy']\n",
        "}"
      ],
      "metadata": {
        "id": "SjluatQp1uEw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# instantiate the grid search cross validation\n",
        "rf_gs = GridSearchCV(\n",
        "  estimator=clf_multi,\n",
        "  param_grid=param_grid,\n",
        "  scoring='accuracy',\n",
        "  cv=5,\n",
        "  refit=True,\n",
        "  return_train_score=True, \n",
        "  verbose=5\n",
        ")"
      ],
      "metadata": {
        "id": "iib6fUEKyODX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Record the current time \n",
        "start = time()\n",
        "# Fit the selected model\n",
        "rf_gs.fit(scaled2_X_train, y_train)\n",
        "# Print the time spend and number of models ran\n",
        "print(\"GridSearchCV took %.2f seconds for %d candidate parameter settings.\" % ((time() - start), len(rf_gs.cv_results_['params'])))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UYvkFjQMybXn",
        "outputId": "d8b83ddf-2786-47ed-d36f-5e331eb63785"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 72 candidates, totalling 360 fits\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=5;, score=(train=0.825, test=0.819) total time=   8.1s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=5;, score=(train=0.821, test=0.817) total time=   4.5s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=5;, score=(train=0.821, test=0.818) total time=   3.1s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=5;, score=(train=0.819, test=0.813) total time=   2.3s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=5;, score=(train=0.828, test=0.823) total time=   2.4s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=10;, score=(train=0.831, test=0.824) total time=   4.9s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=10;, score=(train=0.827, test=0.822) total time=   5.6s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=10;, score=(train=0.826, test=0.822) total time=   4.7s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=10;, score=(train=0.828, test=0.824) total time=   5.9s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=10;, score=(train=0.829, test=0.824) total time=   4.7s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=15;, score=(train=0.832, test=0.826) total time=   7.9s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=15;, score=(train=0.826, test=0.822) total time=   7.1s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=15;, score=(train=0.828, test=0.825) total time=   9.7s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=15;, score=(train=0.827, test=0.823) total time=   6.8s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=15;, score=(train=0.829, test=0.826) total time=   8.3s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=20;, score=(train=0.831, test=0.825) total time=  10.4s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=20;, score=(train=0.826, test=0.823) total time=  11.2s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=20;, score=(train=0.829, test=0.826) total time=   9.8s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=20;, score=(train=0.828, test=0.824) total time=  12.1s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=20;, score=(train=0.831, test=0.827) total time=  10.6s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=5;, score=(train=0.826, test=0.820) total time=   2.3s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=5;, score=(train=0.827, test=0.822) total time=   2.3s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=5;, score=(train=0.824, test=0.819) total time=   2.4s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=5;, score=(train=0.826, test=0.822) total time=   3.5s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=5;, score=(train=0.826, test=0.822) total time=   2.3s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=10;, score=(train=0.829, test=0.824) total time=   4.7s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=10;, score=(train=0.829, test=0.825) total time=   7.5s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=10;, score=(train=0.827, test=0.822) total time=   5.2s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=10;, score=(train=0.829, test=0.825) total time=   7.4s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=10;, score=(train=0.831, test=0.826) total time=   5.4s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=15;, score=(train=0.829, test=0.824) total time=   7.3s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=15;, score=(train=0.827, test=0.823) total time=   7.8s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=15;, score=(train=0.826, test=0.823) total time=   9.1s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=15;, score=(train=0.826, test=0.822) total time=   6.8s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=15;, score=(train=0.830, test=0.825) total time=   8.1s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=20;, score=(train=0.830, test=0.824) total time=  12.1s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=20;, score=(train=0.828, test=0.824) total time=   9.3s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=20;, score=(train=0.828, test=0.824) total time=  10.6s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=20;, score=(train=0.829, test=0.825) total time=  10.5s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=20;, score=(train=0.830, test=0.827) total time=  10.5s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=5;, score=(train=0.826, test=0.821) total time=   2.4s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=5;, score=(train=0.824, test=0.820) total time=   2.4s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=5;, score=(train=0.827, test=0.823) total time=   2.5s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=5;, score=(train=0.823, test=0.819) total time=   3.6s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=5;, score=(train=0.823, test=0.821) total time=   3.7s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=10;, score=(train=0.827, test=0.823) total time=   4.8s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=10;, score=(train=0.827, test=0.824) total time=   5.0s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=10;, score=(train=0.828, test=0.825) total time=   5.8s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=10;, score=(train=0.825, test=0.821) total time=   4.4s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=10;, score=(train=0.830, test=0.827) total time=   6.2s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=15;, score=(train=0.827, test=0.823) total time=   6.9s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=15;, score=(train=0.825, test=0.822) total time=   8.5s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=15;, score=(train=0.828, test=0.823) total time=   7.0s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=15;, score=(train=0.825, test=0.821) total time=   9.7s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=15;, score=(train=0.829, test=0.826) total time=   7.3s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=20;, score=(train=0.828, test=0.823) total time=  10.6s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=20;, score=(train=0.826, test=0.823) total time=  10.8s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=20;, score=(train=0.828, test=0.823) total time=  10.6s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=20;, score=(train=0.825, test=0.822) total time=   9.3s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=20;, score=(train=0.827, test=0.825) total time=  11.7s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=5;, score=(train=0.877, test=0.843) total time=   2.9s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=5;, score=(train=0.874, test=0.838) total time=   3.9s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=5;, score=(train=0.876, test=0.843) total time=   2.9s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=5;, score=(train=0.870, test=0.840) total time=   2.8s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=5;, score=(train=0.870, test=0.839) total time=   2.9s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=10;, score=(train=0.881, test=0.846) total time=   7.0s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=10;, score=(train=0.880, test=0.843) total time=   5.5s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=10;, score=(train=0.882, test=0.845) total time=   7.0s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=10;, score=(train=0.881, test=0.847) total time=   5.7s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=10;, score=(train=0.879, test=0.845) total time=   8.1s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=15;, score=(train=0.882, test=0.847) total time=   8.7s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=15;, score=(train=0.883, test=0.845) total time=   9.7s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=15;, score=(train=0.882, test=0.846) total time=   9.7s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=15;, score=(train=0.883, test=0.848) total time=   8.6s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=15;, score=(train=0.881, test=0.848) total time=   9.6s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=20;, score=(train=0.882, test=0.848) total time=  14.1s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=20;, score=(train=0.884, test=0.847) total time=  12.5s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=20;, score=(train=0.883, test=0.846) total time=  12.6s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=20;, score=(train=0.885, test=0.850) total time=  12.8s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=20;, score=(train=0.881, test=0.847) total time=  13.8s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=5;, score=(train=0.867, test=0.837) total time=   3.0s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=5;, score=(train=0.866, test=0.839) total time=   3.5s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=5;, score=(train=0.865, test=0.837) total time=   3.6s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=5;, score=(train=0.863, test=0.838) total time=   2.9s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=5;, score=(train=0.870, test=0.843) total time=   2.8s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=10;, score=(train=0.875, test=0.844) total time=   7.1s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=10;, score=(train=0.873, test=0.844) total time=   5.6s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=10;, score=(train=0.872, test=0.843) total time=   7.1s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=10;, score=(train=0.870, test=0.843) total time=   5.7s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=10;, score=(train=0.871, test=0.844) total time=   7.0s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=15;, score=(train=0.876, test=0.846) total time=  10.0s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=15;, score=(train=0.876, test=0.847) total time=   9.4s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=15;, score=(train=0.874, test=0.845) total time=   9.8s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=15;, score=(train=0.873, test=0.845) total time=   9.3s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=15;, score=(train=0.872, test=0.846) total time=   8.9s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=20;, score=(train=0.876, test=0.846) total time=  12.7s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=20;, score=(train=0.877, test=0.848) total time=  14.0s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=20;, score=(train=0.876, test=0.846) total time=  12.7s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=20;, score=(train=0.876, test=0.848) total time=  12.8s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=20;, score=(train=0.873, test=0.849) total time=  12.5s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=5;, score=(train=0.863, test=0.841) total time=   2.7s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=5;, score=(train=0.864, test=0.842) total time=   2.9s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=5;, score=(train=0.863, test=0.838) total time=   4.6s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=5;, score=(train=0.861, test=0.841) total time=   3.9s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=5;, score=(train=0.863, test=0.842) total time=   2.8s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=10;, score=(train=0.865, test=0.844) total time=   6.7s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=10;, score=(train=0.867, test=0.844) total time=   6.8s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=10;, score=(train=0.869, test=0.846) total time=   5.7s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=10;, score=(train=0.867, test=0.846) total time=   7.1s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=10;, score=(train=0.867, test=0.846) total time=   5.4s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=15;, score=(train=0.867, test=0.846) total time=   9.5s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=15;, score=(train=0.868, test=0.847) total time=  10.8s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=15;, score=(train=0.870, test=0.847) total time=   8.8s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=15;, score=(train=0.869, test=0.849) total time=   9.6s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=15;, score=(train=0.868, test=0.847) total time=   9.4s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=20;, score=(train=0.867, test=0.846) total time=  11.6s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=20;, score=(train=0.868, test=0.846) total time=  12.5s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=20;, score=(train=0.870, test=0.847) total time=  13.4s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=20;, score=(train=0.870, test=0.850) total time=  12.5s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=20;, score=(train=0.868, test=0.847) total time=  12.4s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=5;, score=(train=0.926, test=0.846) total time=   3.1s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=5;, score=(train=0.924, test=0.843) total time=   4.6s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=5;, score=(train=0.922, test=0.848) total time=   3.2s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=5;, score=(train=0.924, test=0.844) total time=   3.2s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=5;, score=(train=0.927, test=0.842) total time=   3.6s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=10;, score=(train=0.937, test=0.852) total time=   8.9s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=10;, score=(train=0.935, test=0.850) total time=   6.4s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=10;, score=(train=0.934, test=0.851) total time=   7.8s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=10;, score=(train=0.934, test=0.851) total time=   6.6s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=10;, score=(train=0.934, test=0.848) total time=   7.0s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=15;, score=(train=0.941, test=0.855) total time=  11.0s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=15;, score=(train=0.937, test=0.852) total time=  10.9s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=15;, score=(train=0.938, test=0.855) total time=  11.0s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=15;, score=(train=0.939, test=0.855) total time=  10.9s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=15;, score=(train=0.938, test=0.852) total time=  10.7s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=20;, score=(train=0.942, test=0.856) total time=  14.0s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=20;, score=(train=0.939, test=0.853) total time=  15.6s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=20;, score=(train=0.940, test=0.857) total time=  13.9s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=20;, score=(train=0.940, test=0.855) total time=  14.1s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=20;, score=(train=0.939, test=0.853) total time=  14.0s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=5;, score=(train=0.905, test=0.843) total time=   3.2s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=5;, score=(train=0.906, test=0.843) total time=   4.7s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=5;, score=(train=0.903, test=0.843) total time=   4.3s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=5;, score=(train=0.902, test=0.843) total time=   3.1s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=5;, score=(train=0.901, test=0.845) total time=   3.2s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=10;, score=(train=0.912, test=0.849) total time=   7.6s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=10;, score=(train=0.915, test=0.851) total time=   6.0s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=10;, score=(train=0.913, test=0.849) total time=   7.4s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=10;, score=(train=0.910, test=0.850) total time=   6.2s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=10;, score=(train=0.911, test=0.852) total time=   7.5s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=15;, score=(train=0.915, test=0.851) total time=  10.7s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=15;, score=(train=0.917, test=0.852) total time=  11.2s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=15;, score=(train=0.914, test=0.851) total time=   9.4s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=15;, score=(train=0.914, test=0.853) total time=  10.6s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=15;, score=(train=0.913, test=0.854) total time=  10.6s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=20;, score=(train=0.915, test=0.852) total time=  13.6s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=20;, score=(train=0.918, test=0.853) total time=  14.7s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=20;, score=(train=0.917, test=0.853) total time=  13.8s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=20;, score=(train=0.915, test=0.854) total time=  13.7s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=20;, score=(train=0.914, test=0.853) total time=  13.8s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=5;, score=(train=0.886, test=0.843) total time=   4.6s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=5;, score=(train=0.886, test=0.842) total time=   4.5s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=5;, score=(train=0.888, test=0.848) total time=   3.1s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=5;, score=(train=0.885, test=0.846) total time=   3.2s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=5;, score=(train=0.884, test=0.843) total time=   3.5s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=10;, score=(train=0.891, test=0.848) total time=   7.2s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=10;, score=(train=0.891, test=0.846) total time=   6.5s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=10;, score=(train=0.893, test=0.851) total time=   6.9s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=10;, score=(train=0.890, test=0.851) total time=   6.8s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=10;, score=(train=0.890, test=0.846) total time=   6.7s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=15;, score=(train=0.892, test=0.849) total time=  12.7s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=15;, score=(train=0.895, test=0.850) total time=   8.9s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=15;, score=(train=0.895, test=0.852) total time=  10.4s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=15;, score=(train=0.892, test=0.852) total time=  10.6s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=15;, score=(train=0.894, test=0.850) total time=  10.5s\n",
            "[CV 1/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=20;, score=(train=0.895, test=0.851) total time=  14.6s\n",
            "[CV 2/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=20;, score=(train=0.896, test=0.850) total time=  13.2s\n",
            "[CV 3/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=20;, score=(train=0.895, test=0.852) total time=  13.7s\n",
            "[CV 4/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=20;, score=(train=0.894, test=0.853) total time=  13.9s\n",
            "[CV 5/5] END bootstrap=True, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=20;, score=(train=0.895, test=0.852) total time=  14.4s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=5;, score=(train=0.824, test=0.818) total time=   4.1s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=5;, score=(train=0.822, test=0.817) total time=   3.4s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=5;, score=(train=0.827, test=0.823) total time=   4.7s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=5;, score=(train=0.824, test=0.820) total time=   3.8s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=5;, score=(train=0.824, test=0.821) total time=   3.4s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=10;, score=(train=0.827, test=0.821) total time=   8.4s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=10;, score=(train=0.828, test=0.823) total time=   6.8s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=10;, score=(train=0.828, test=0.824) total time=   8.5s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=10;, score=(train=0.827, test=0.824) total time=   6.7s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=10;, score=(train=0.828, test=0.824) total time=   9.7s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=15;, score=(train=0.828, test=0.822) total time=  11.9s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=15;, score=(train=0.828, test=0.823) total time=  11.6s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=15;, score=(train=0.826, test=0.822) total time=  11.7s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=15;, score=(train=0.827, test=0.823) total time=  10.3s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=15;, score=(train=0.828, test=0.825) total time=  13.1s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=20;, score=(train=0.828, test=0.823) total time=  16.0s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=20;, score=(train=0.829, test=0.824) total time=  15.0s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=20;, score=(train=0.828, test=0.824) total time=  15.2s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=20;, score=(train=0.828, test=0.825) total time=  16.2s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=1, n_estimators=20;, score=(train=0.829, test=0.826) total time=  15.4s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=5;, score=(train=0.828, test=0.823) total time=   3.6s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=5;, score=(train=0.818, test=0.813) total time=   4.1s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=5;, score=(train=0.825, test=0.821) total time=   4.2s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=5;, score=(train=0.823, test=0.820) total time=   3.3s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=5;, score=(train=0.824, test=0.821) total time=   3.5s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=10;, score=(train=0.832, test=0.826) total time=   8.3s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=10;, score=(train=0.826, test=0.822) total time=   7.4s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=10;, score=(train=0.827, test=0.822) total time=   9.4s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=10;, score=(train=0.826, test=0.822) total time=   8.0s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=10;, score=(train=0.827, test=0.824) total time=   7.2s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=15;, score=(train=0.831, test=0.825) total time=  11.8s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=15;, score=(train=0.827, test=0.823) total time=  11.6s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=15;, score=(train=0.828, test=0.823) total time=  12.7s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=15;, score=(train=0.826, test=0.822) total time=  11.5s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=15;, score=(train=0.827, test=0.824) total time=  11.2s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=20;, score=(train=0.831, test=0.826) total time=  15.5s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=20;, score=(train=0.828, test=0.824) total time=  15.1s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=20;, score=(train=0.828, test=0.825) total time=  16.9s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=20;, score=(train=0.826, test=0.823) total time=  14.6s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=2, n_estimators=20;, score=(train=0.826, test=0.823) total time=  15.4s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=5;, score=(train=0.828, test=0.822) total time=   4.5s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=5;, score=(train=0.825, test=0.821) total time=   3.8s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=5;, score=(train=0.823, test=0.817) total time=   3.5s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=5;, score=(train=0.827, test=0.823) total time=   4.1s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=5;, score=(train=0.824, test=0.818) total time=   6.0s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=10;, score=(train=0.829, test=0.824) total time=   7.1s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=10;, score=(train=0.827, test=0.823) total time=   8.5s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=10;, score=(train=0.826, test=0.821) total time=   6.8s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=10;, score=(train=0.831, test=0.827) total time=   8.5s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=10;, score=(train=0.830, test=0.827) total time=   7.7s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=15;, score=(train=0.829, test=0.824) total time=  11.0s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=15;, score=(train=0.827, test=0.823) total time=  13.4s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=15;, score=(train=0.827, test=0.823) total time=  11.6s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=15;, score=(train=0.830, test=0.826) total time=  12.1s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=15;, score=(train=0.830, test=0.827) total time=  11.8s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=20;, score=(train=0.829, test=0.824) total time=  15.2s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=20;, score=(train=0.828, test=0.823) total time=  16.3s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=20;, score=(train=0.827, test=0.824) total time=  14.6s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=20;, score=(train=0.830, test=0.826) total time=  15.1s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=10, min_samples_leaf=4, n_estimators=20;, score=(train=0.829, test=0.826) total time=  17.3s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=5;, score=(train=0.881, test=0.843) total time=   5.1s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=5;, score=(train=0.880, test=0.845) total time=   4.2s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=5;, score=(train=0.884, test=0.846) total time=   5.4s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=5;, score=(train=0.885, test=0.850) total time=   4.5s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=5;, score=(train=0.879, test=0.843) total time=   4.4s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=10;, score=(train=0.887, test=0.849) total time=   9.9s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=10;, score=(train=0.887, test=0.848) total time=   9.8s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=10;, score=(train=0.886, test=0.848) total time=   8.4s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=10;, score=(train=0.889, test=0.851) total time=  11.5s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=10;, score=(train=0.885, test=0.847) total time=   9.8s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=15;, score=(train=0.888, test=0.850) total time=  14.2s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=15;, score=(train=0.888, test=0.848) total time=  14.3s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=15;, score=(train=0.886, test=0.849) total time=  15.3s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=15;, score=(train=0.887, test=0.851) total time=  14.3s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=15;, score=(train=0.887, test=0.849) total time=  14.4s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=20;, score=(train=0.888, test=0.850) total time=  18.3s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=20;, score=(train=0.888, test=0.849) total time=  21.0s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=20;, score=(train=0.886, test=0.849) total time=  18.1s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=20;, score=(train=0.888, test=0.851) total time=  18.7s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=1, n_estimators=20;, score=(train=0.885, test=0.848) total time=  20.7s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=5;, score=(train=0.875, test=0.845) total time=   3.9s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=5;, score=(train=0.880, test=0.849) total time=   5.7s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=5;, score=(train=0.871, test=0.843) total time=   4.4s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=5;, score=(train=0.877, test=0.847) total time=   4.5s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=5;, score=(train=0.873, test=0.845) total time=   5.3s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=10;, score=(train=0.880, test=0.846) total time=   8.3s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=10;, score=(train=0.880, test=0.848) total time=   9.9s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=10;, score=(train=0.882, test=0.847) total time=  11.8s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=10;, score=(train=0.880, test=0.849) total time=   8.7s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=10;, score=(train=0.875, test=0.846) total time=   9.4s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=15;, score=(train=0.879, test=0.847) total time=  13.8s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=15;, score=(train=0.880, test=0.849) total time=  14.2s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=15;, score=(train=0.883, test=0.848) total time=  15.9s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=15;, score=(train=0.881, test=0.850) total time=  14.2s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=15;, score=(train=0.876, test=0.847) total time=  14.1s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=20;, score=(train=0.880, test=0.849) total time=  19.1s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=20;, score=(train=0.881, test=0.849) total time=  19.6s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=20;, score=(train=0.882, test=0.847) total time=  18.7s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=20;, score=(train=0.880, test=0.849) total time=  19.2s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=2, n_estimators=20;, score=(train=0.876, test=0.847) total time=  19.3s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=5;, score=(train=0.873, test=0.845) total time=   5.6s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=5;, score=(train=0.874, test=0.846) total time=   4.2s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=5;, score=(train=0.872, test=0.846) total time=   4.4s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=5;, score=(train=0.868, test=0.843) total time=   5.7s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=5;, score=(train=0.868, test=0.841) total time=   3.9s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=10;, score=(train=0.874, test=0.845) total time=   9.6s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=10;, score=(train=0.879, test=0.851) total time=   9.4s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=10;, score=(train=0.875, test=0.848) total time=  10.7s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=10;, score=(train=0.873, test=0.847) total time=  10.2s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=10;, score=(train=0.872, test=0.845) total time=   8.5s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=15;, score=(train=0.874, test=0.846) total time=  13.2s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=15;, score=(train=0.877, test=0.851) total time=  14.0s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=15;, score=(train=0.875, test=0.849) total time=  15.4s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=15;, score=(train=0.874, test=0.849) total time=  14.2s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=15;, score=(train=0.872, test=0.847) total time=  13.4s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=20;, score=(train=0.876, test=0.848) total time=  19.8s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=20;, score=(train=0.877, test=0.850) total time=  18.0s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=20;, score=(train=0.874, test=0.848) total time=  18.6s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=20;, score=(train=0.875, test=0.851) total time=  19.5s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=15, min_samples_leaf=4, n_estimators=20;, score=(train=0.873, test=0.848) total time=  18.3s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=5;, score=(train=0.937, test=0.851) total time=   6.2s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=5;, score=(train=0.940, test=0.848) total time=   4.8s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=5;, score=(train=0.941, test=0.845) total time=   6.0s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=5;, score=(train=0.940, test=0.849) total time=   4.9s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=5;, score=(train=0.941, test=0.851) total time=   4.8s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=10;, score=(train=0.946, test=0.857) total time=  11.5s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=10;, score=(train=0.947, test=0.853) total time=  11.7s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=10;, score=(train=0.947, test=0.853) total time=  10.8s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=10;, score=(train=0.948, test=0.855) total time=  10.2s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=10;, score=(train=0.948, test=0.855) total time=   9.5s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=15;, score=(train=0.947, test=0.857) total time=  16.4s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=15;, score=(train=0.949, test=0.854) total time=  17.5s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=15;, score=(train=0.948, test=0.855) total time=  15.8s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=15;, score=(train=0.947, test=0.857) total time=  15.4s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=15;, score=(train=0.948, test=0.857) total time=  17.1s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=20;, score=(train=0.948, test=0.858) total time=  21.2s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=20;, score=(train=0.950, test=0.854) total time=  20.8s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=20;, score=(train=0.950, test=0.855) total time=  23.2s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=20;, score=(train=0.947, test=0.859) total time=  20.2s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=1, n_estimators=20;, score=(train=0.950, test=0.859) total time=  21.5s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=5;, score=(train=0.923, test=0.852) total time=   5.7s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=5;, score=(train=0.927, test=0.850) total time=   6.1s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=5;, score=(train=0.921, test=0.849) total time=   4.7s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=5;, score=(train=0.923, test=0.853) total time=   5.0s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=5;, score=(train=0.921, test=0.847) total time=   5.6s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=10;, score=(train=0.927, test=0.855) total time=  10.5s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=10;, score=(train=0.931, test=0.856) total time=   9.5s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=10;, score=(train=0.927, test=0.854) total time=  10.8s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=10;, score=(train=0.929, test=0.858) total time=  11.8s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=10;, score=(train=0.928, test=0.853) total time=  10.8s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=15;, score=(train=0.930, test=0.855) total time=  15.5s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=15;, score=(train=0.933, test=0.857) total time=  15.6s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=15;, score=(train=0.927, test=0.854) total time=  17.0s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=15;, score=(train=0.929, test=0.858) total time=  15.5s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=15;, score=(train=0.928, test=0.854) total time=  15.6s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=20;, score=(train=0.930, test=0.856) total time=  22.3s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=20;, score=(train=0.933, test=0.858) total time=  21.1s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=20;, score=(train=0.927, test=0.856) total time=  20.2s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=20;, score=(train=0.928, test=0.859) total time=  23.2s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=2, n_estimators=20;, score=(train=0.927, test=0.856) total time=  25.3s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=5;, score=(train=0.902, test=0.847) total time=   4.9s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=5;, score=(train=0.903, test=0.848) total time=   4.7s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=5;, score=(train=0.900, test=0.850) total time=   5.8s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=5;, score=(train=0.903, test=0.850) total time=   4.6s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=5;, score=(train=0.902, test=0.849) total time=   6.7s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=10;, score=(train=0.908, test=0.851) total time=  14.5s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=10;, score=(train=0.909, test=0.853) total time=   9.8s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=10;, score=(train=0.906, test=0.852) total time=  10.6s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=10;, score=(train=0.908, test=0.855) total time=  10.6s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=10;, score=(train=0.905, test=0.851) total time=  10.7s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=15;, score=(train=0.909, test=0.852) total time=  15.8s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=15;, score=(train=0.911, test=0.855) total time=  15.6s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=15;, score=(train=0.908, test=0.854) total time=  15.2s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=15;, score=(train=0.910, test=0.857) total time=  16.8s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=15;, score=(train=0.906, test=0.852) total time=  16.9s\n",
            "[CV 1/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=20;, score=(train=0.909, test=0.854) total time=  35.9s\n",
            "[CV 2/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=20;, score=(train=0.912, test=0.855) total time=  27.5s\n",
            "[CV 3/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=20;, score=(train=0.909, test=0.855) total time=  31.8s\n",
            "[CV 4/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=20;, score=(train=0.910, test=0.858) total time=  21.6s\n",
            "[CV 5/5] END bootstrap=False, criterion=entropy, max_depth=20, min_samples_leaf=4, n_estimators=20;, score=(train=0.908, test=0.854) total time=  20.0s\n",
            "GridSearchCV took 3749.28 seconds for 72 candidate parameter settings.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "y_pred2_grid = rf_gs.predict(scaled2_X_test)\n",
        "accuracy_grid = accuracy_score(y_test, y_pred2_grid)\n",
        "print(accuracy_grid)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FH3hW_JiyjNd",
        "outputId": "864a6b99-8baf-4b28-9967-52aeb745d9a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.8581546521781314\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_grid_bestModel = rf_gs.best_estimator_.predict(scaled2_X_test)\n",
        "print(\"The model with parameters: \", rf_gs.best_estimator_, \" \\ngives the following accuracy: \", accuracy_score(y_test, y_pred_grid_bestModel))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2BxW8qFW_f5p",
        "outputId": "d6657fb8-547e-4313-852e-08fcb85a064b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The model with parameters:  RandomForestClassifier(bootstrap=False, criterion='entropy', max_depth=20,\n",
            "                       n_estimators=20, random_state=41)  \n",
            "gives the following accuracy:  0.8581546521781314\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "pickle.dump(rf_gs.best_estimator_, open('/content/drive/MyDrive/UNSWNB15/RF_model_MULTI.pkl', 'wb'))"
      ],
      "metadata": {
        "id": "mKvCbzgUAOZG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cf_matrix = confusion_matrix(y_true, y_pred_grid_bestModel)\n",
        "ax = sns.heatmap(cf_matrix, annot=True, cmap='Reds', fmt='g') # fmt='g' to disable scientific notation\n",
        "ax.set_xlabel('Predicted', fontsize=12)\n",
        "ax.set_ylabel('True', fontsize=12)\n",
        "ax.set_title('Confusion matrix')\n",
        "ax.xaxis.set_ticklabels(attack_types_sorted, rotation=90)\n",
        "ax.yaxis.set_ticklabels(attack_types_sorted, rotation=0)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "tBOPdcy4BQ0K",
        "outputId": "20888b70-0c1d-4086-88c5-e80c2d34bdad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jVl2_AFbBYBk"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}